// src/services/supabaseClient.js - Cliente Supabase isolado
import { SUPABASE_URL, SUPABASE_ANON_KEY } from '../config.js';

let supabaseClient = null;

export function initializeSupabase() {
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
        console.warn('‚ö†Ô∏è Credenciais do Supabase n√£o encontradas - modo offline');
        return null;
    }

    // Valida se as credenciais n√£o s√£o placeholders
    if (SUPABASE_URL.includes('sua-url-do-supabase') ||
        SUPABASE_URL === 'https://seu-projeto.supabase.co' ||
        SUPABASE_ANON_KEY.length < 50) {
        console.warn('‚ö†Ô∏è Credenciais do Supabase s√£o placeholders - modo offline');
        return null;
    }

    try {
        // Verifica se o Supabase JS est√° dispon√≠vel
        if (typeof window === 'undefined' || !window.supabase) {
            console.error('‚ùå Biblioteca do Supabase n√£o carregada');
            return null;
        }

        const { createClient } = window.supabase;
        supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                persistSession: true, // Habilita sess√£o para passar RLS
                autoRefreshToken: true, // Mant√©m token v√°lido
                storage: window.localStorage, // Usar localStorage para persistir
                storageKey: 'sb-sistema-avaliativo-auth-token'
            },
            db: {
                schema: 'public'
            },
            global: {
                headers: {
                    'X-Client-Info': 'sistema-avaliativo@2.0.1'
                }
            }
        });

        console.log('‚úÖ Supabase inicializado com sucesso:', {
            url: SUPABASE_URL,
            keyLength: SUPABASE_ANON_KEY.length
        });

        // Inicializa sess√£o an√¥nima se n√£o houver usu√°rio
        // COMENTADO: Sistema funciona perfeitamente com Security Definer nas fun√ß√µes RPC
        // initializeAnonymousSession(supabaseClient);

        return supabaseClient;
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Supabase:', error);
        return null;
    }
}

export function getSupabaseClient() {
    if (!supabaseClient) {
        supabaseClient = initializeSupabase();
    }
    return supabaseClient;
}

export function isSupabaseAvailable() {
    return getSupabaseClient() !== null;
}

/**
 * Testa a conectividade com o Supabase
 * @returns {Promise<boolean>}
 */
export async function testSupabaseConnection() {
    const client = getSupabaseClient();

    if (!client) {
        console.log('üîå Supabase n√£o inicializado - usando modo offline');
        return false;
    }

    try {
        console.log('üîå Testando conex√£o com Supabase...');

        // Testa uma consulta simples
        const { data, error } = await client
            .from('academic_periods')
            .select('id')
            .limit(1);

        if (error) {
            console.warn('‚ö†Ô∏è Erro ao testar conex√£o Supabase:', error.message);
            return false;
        }

        console.log('‚úÖ Conex√£o com Supabase funcionando');
        return true;

    } catch (error) {
        console.warn('‚ö†Ô∏è Falha na conex√£o com Supabase:', error.message);
        return false;
    }
}

/**
 * For√ßa reinicializa√ß√£o do cliente Supabase
 */
/**
 * Inicializa sess√£o an√¥nima para permitir opera√ß√µes com RLS
 */
async function initializeAnonymousSession(client) {
    try {
        const { data: session } = await client.auth.getSession();

        if (!session?.session) {
            console.log('üîê Criando sess√£o an√¥nima para RLS...');

            // Tenta autentica√ß√£o an√¥nima (se habilitada no Supabase)
            const { data: anonData, error } = await client.auth.signInAnonymously();

            if (error) {
                console.warn('‚ö†Ô∏è Autentica√ß√£o an√¥nima falhou:', error.message);
                console.log('üí° Sugest√£o: Habilite autentica√ß√£o an√¥nima no Supabase ou desabilite RLS');
                console.log('üìå Sistema continuar√° funcionando, mas algumas opera√ß√µes podem falhar');
                // N√£o retorna erro - permite que o sistema continue
                return false; // Indica que autentica√ß√£o falhou, mas sistema pode continuar
            } else {
                console.log('‚úÖ Sess√£o an√¥nima criada com sucesso');
                return true; // Indica que autentica√ß√£o foi bem-sucedida
            }
        } else {
            console.log('‚úÖ Sess√£o existente encontrada');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao inicializar sess√£o an√¥nima:', error.message);
    }
}

export function reinitializeSupabase() {
    supabaseClient = null;
    return initializeSupabase();
}