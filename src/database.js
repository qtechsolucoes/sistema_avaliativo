// src/database.js - VERS√ÉO CORRIGIDA

// src/database.js - VERS√ÉO CORRIGIDA COM MELHOR DEBUG

import { SUPABASE_URL, SUPABASE_ANON_KEY } from './config.js';

let supabaseClient;
const { createClient } = supabase;

// CORRE√á√ÉO: Debug detalhado da inicializa√ß√£o
console.log('=== INICIALIZANDO SUPABASE ===');
console.log('URL fornecida:', SUPABASE_URL);
console.log('Key fornecida:', SUPABASE_ANON_KEY ? `${SUPABASE_ANON_KEY.substring(0, 20)}...` : 'N√ÉO FORNECIDA');

if (SUPABASE_URL && SUPABASE_ANON_KEY && 
    SUPABASE_URL !== 'https://seu-projeto.supabase.co' && 
    SUPABASE_ANON_KEY !== 'sua-chave-anonima-aqui') {
    try {
        supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        console.log('‚úÖ Supabase inicializado com sucesso');
        
        // TESTE de conex√£o
        supabaseClient.from('students').select('count', { count: 'exact', head: true })
            .then(({ count, error }) => {
                if (error) {
                    console.error('‚ùå Erro na conex√£o de teste:', error);
                } else {
                    console.log(`‚úÖ Conex√£o testada - ${count} estudantes encontrados`);
                }
            });
            
    } catch (e) {
        console.error("‚ùå Erro ao inicializar Supabase:", e);
        supabaseClient = null;
    }
} else {
    console.warn("‚ö†Ô∏è Credenciais do Supabase n√£o configuradas - usando modo offline");
    supabaseClient = null;
}

// ===================================================================================
// FUN√á√ïES DE BUSCA DE DADOS ESTRUTURAIS
// ===================================================================================

/**
 * Busca as turmas de um determinado ano e per√≠odo letivo.
 */
export async function getClassesByGrade(grade, periodName = "3¬∫ Bimestre", year = 2025) {
    console.log(`=== BUSCANDO TURMAS ===`);
    console.log(`Grade: ${grade}, Per√≠odo: ${periodName}, Ano: ${year}`);
    console.log(`Supabase cliente dispon√≠vel:`, !!supabaseClient);
    
    if (!supabaseClient) {
        console.warn('‚ö†Ô∏è Supabase n√£o dispon√≠vel - usando dados mock para turmas');
        const mockData = createMockClasses(grade);
        console.log('Mock classes criadas:', mockData);
        return mockData;
    }
    
    try {
        console.log('üîç Buscando per√≠odo acad√™mico...');
        const { data: periodData, error: periodError } = await supabaseClient
            .from('academic_periods')
            .select('id')
            .eq('year', year)
            .eq('name', periodName)
            .single();

        if (periodError) {
            console.warn('‚ö†Ô∏è Per√≠odo acad√™mico n√£o encontrado:', periodError);
            console.log('Tentando buscar TODOS os per√≠odos para debug...');
            
            const { data: allPeriods, error: allPeriodsError } = await supabaseClient
                .from('academic_periods')
                .select('*');
            
            if (allPeriodsError) {
                console.error('‚ùå Erro ao buscar per√≠odos:', allPeriodsError);
            } else {
                console.log('üìÖ Per√≠odos dispon√≠veis no banco:', allPeriods);
            }
            
            return createMockClasses(grade);
        }

        console.log('‚úÖ Per√≠odo encontrado:', periodData);

        console.log('üîç Buscando turmas...');
        const { data, error } = await supabaseClient
            .from('classes')
            .select('id, name')
            .eq('grade', grade)
            .eq('academic_period_id', periodData.id);

        if (error) {
            console.error('‚ùå Erro ao buscar turmas:', error);
            throw error;
        }
        
        console.log(`‚úÖ Turmas encontradas no Supabase:`, data);
        
        // Garante que sempre retorna um array
        return data && data.length > 0 ? data : createMockClasses(grade);
        
    } catch (error) {
        console.error("‚ùå Erro geral ao buscar turmas:", error.message);
        return createMockClasses(grade);
    }
}

/**
 * NOVA FUN√á√ÉO: Cria turmas mock para funcionamento offline
 */
function createMockClasses(grade) {
    return [
        { id: `mock-class-${grade}-A`, name: 'A' },
        { id: `mock-class-${grade}-B`, name: 'B' }
    ];
}

/**
 * Busca os alunos matriculados numa turma espec√≠fica, ordenados por nome.
 * @param {string} classId - O ID da turma.
 * @returns {Promise<Array>} - Lista de objetos de aluno.
 */
export async function getStudentsByClass(classId) {
    if (!supabaseClient) {
        console.warn('Modo offline: retornando alunos mock');
        return createMockStudents(classId);
    }
    
    try {
        // CORRE√á√ÉO: Query melhorada com melhor tratamento de erros
        const { data, error } = await supabaseClient
            .from('class_enrollments')
            .select(`
                students (
                    id, 
                    full_name, 
                    adaptation_details
                )
            `)
            .eq('class_id', classId)
            .order('full_name', { foreignTable: 'students', ascending: true });

        if (error) throw error;
        
        // CORRE√á√ÉO: Valida√ß√£o robusta dos dados retornados
        if (!data || data.length === 0) {
            console.warn('Nenhum aluno encontrado para a turma, usando dados mock');
            return createMockStudents(classId);
        }

        // CORRE√á√ÉO: Filtra e valida dados antes de retornar
        const validStudents = data
            .map(enrollment => enrollment.students)
            .filter(student => student && student.id && student.full_name);

        return validStudents.length > 0 ? validStudents : createMockStudents(classId);
        
    } catch (error) {
        console.error("Erro ao buscar alunos da turma:", error.message);
        return createMockStudents(classId);
    }
}

/**
 * NOVA FUN√á√ÉO: Cria alunos mock baseados na estrutura real do banco
 */
function createMockStudents(classId) {
    const baseStudents = [
        { 
            id: `mock-student-1-${classId}`, 
            full_name: 'Ana Silva', 
            adaptation_details: null 
        },
        { 
            id: `mock-student-2-${classId}`, 
            full_name: 'Jo√£o Santos', 
            adaptation_details: {
                "diagnosis": ["TDAH", "Transtorno de aprendizagem"],
                "suggestions": ["Textos curtos", "Poucas op√ß√µes de alternativas"],
                "difficulties": ["Aten√ß√£o", "Concentra√ß√£o"]
            }
        },
        { 
            id: `mock-student-3-${classId}`, 
            full_name: 'Maria Costa', 
            adaptation_details: {
                "diagnosis": ["TEA", "Defici√™ncia Motora"],
                "suggestions": ["Atividades para coordena√ß√£o motora", "Pareamento"],
                "difficulties": ["Coordena√ß√£o motora fina"]
            }
        },
        { 
            id: `mock-student-4-${classId}`, 
            full_name: 'Pedro Lima', 
            adaptation_details: null 
        },
        { 
            id: `mock-student-5-${classId}`, 
            full_name: 'Sofia Oliveira', 
            adaptation_details: {
                "diagnosis": ["S√≠ndrome de Down"],
                "suggestions": ["Coordena√ß√£o motora", "Rela√ß√£o n√∫meros/quantidades"],
                "difficulties": ["Aten√ß√£o e concentra√ß√£o"]
            }
        },
        { 
            id: `mock-student-6-${classId}`, 
            full_name: 'Carlos Mendes', 
            adaptation_details: {
                "diagnosis": ["Defici√™ncia Intelectual"],
                "suggestions": ["Atividades com textos curtos", "Poucas alternativas de respostas"],
                "difficulties": ["Interpreta√ß√£o textual", "C√°lculos matem√°ticos"]
            }
        }
    ];
    
    console.log('Dados mock criados com alunos at√≠picos (estrutura real):', 
                baseStudents.filter(s => s.adaptation_details).length);
    return baseStudents;
}

// ===================================================================================
// FUN√á√ïES DE BUSCA DE DADOS DA AVALIA√á√ÉO
// ===================================================================================

/**
 * Busca os detalhes de uma avalia√ß√£o e a sua lista de quest√µes ordenada.
 * @param {number} grade - O ano da avalia√ß√£o.
 * @param {string} disciplineName - O nome da disciplina.
 * @param {string} periodName - O nome do per√≠odo.
 * @param {number} year - O ano letivo.
 * @returns {Promise<object|null>} - O objeto da avalia√ß√£o com a lista de quest√µes.
 */
export async function getAssessmentData(grade, disciplineName = 'Artes', periodName = '3¬∫ Bimestre', year = 2025) {
    if (!supabaseClient) {
        console.warn('Modo offline: retornando avalia√ß√£o mock');
        return createMockAssessment(grade, disciplineName);
    }
    
    try {
        // 1. Busca a avalia√ß√£o usando a fun√ß√£o RPC
        const { data: assessmentData, error: assessmentError } = await supabaseClient
            .rpc('get_assessment_by_details', {
                p_grade: grade,
                p_discipline_name: disciplineName,
                p_period_name: periodName,
                p_year: year
            })
            .single();

        if (assessmentError || !assessmentData) {
            console.warn('Avalia√ß√£o n√£o encontrada no banco, usando dados mock:', assessmentError);
            return createMockAssessment(grade, disciplineName);
        }

        // 2. Busca as quest√µes associadas
        const { data: questionsData, error: questionsError } = await supabaseClient
            .from('assessment_questions')
            .select(`
                questions (
                    id,
                    question_text,
                    options,
                    grade,
                    discipline_id
                )
            `)
            .eq('assessment_id', assessmentData.id)
            .order('question_order');

        if (questionsError) {
            console.warn('Erro ao buscar quest√µes, usando mock:', questionsError);
            return createMockAssessment(grade, disciplineName);
        }

        // CORRE√á√ÉO: Valida e processa as quest√µes
        const validQuestions = questionsData
            .map(q => q.questions)
            .filter(question => question && question.id && question.question_text)
            .map(question => processQuestionOptions(question));

        if (validQuestions.length === 0) {
            console.warn('Nenhuma quest√£o v√°lida encontrada, usando mock');
            return createMockAssessment(grade, disciplineName);
        }

        return {
            id: assessmentData.id,
            title: assessmentData.title,
            baseText: assessmentData.base_text || 'Texto base n√£o dispon√≠vel.',
            questions: validQuestions
        };

    } catch (error) {
        console.error("Erro ao buscar dados da avalia√ß√£o:", error.message);
        return createMockAssessment(grade, disciplineName);
    }
}

/**
 * NOVA FUN√á√ÉO: Processa as op√ß√µes das quest√µes para garantir estrutura correta
 */
function processQuestionOptions(question) {
    let options = [];
    
    try {
        // Se options for string JSON, faz parse
        if (typeof question.options === 'string') {
            options = JSON.parse(question.options);
        } else if (Array.isArray(question.options)) {
            options = question.options;
        } else {
            console.warn('Estrutura de op√ß√µes inv√°lida para quest√£o:', question.id);
            options = [
                { text: 'Op√ß√£o A', isCorrect: true },
                { text: 'Op√ß√£o B', isCorrect: false }
            ];
        }
        
        // CORRE√á√ÉO: Garante que h√° pelo menos uma op√ß√£o correta
        const hasCorrectOption = options.some(opt => opt.isCorrect === true);
        if (!hasCorrectOption && options.length > 0) {
            options[0].isCorrect = true;
            console.warn('Quest√£o sem resposta correta, marcando primeira op√ß√£o:', question.id);
        }
        
    } catch (error) {
        console.error('Erro ao processar op√ß√µes da quest√£o:', question.id, error);
        options = [
            { text: 'Op√ß√£o A', isCorrect: true },
            { text: 'Op√ß√£o B', isCorrect: false }
        ];
    }
    
    return { ...question, options };
}

/**
 * NOVA FUN√á√ÉO: Cria avalia√ß√£o mock para funcionamento offline
 */
function createMockAssessment(grade, disciplineName) {
    return {
        id: `mock-assessment-${grade}-${disciplineName.toLowerCase()}`,
        title: `Avalia√ß√£o de ${disciplineName} - ${grade}¬∫ Ano`,
        baseText: `Este √© um texto base de apoio para a avalia√ß√£o de ${disciplineName} do ${grade}¬∫ ano. 
        
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.
        
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.`,
        questions: [
            {
                id: `mock-q1-${grade}`,
                question_text: `Qual √© a principal caracter√≠stica da arte do ${grade}¬∫ ano de ensino?`,
                options: [
                    { text: 'Express√£o criativa e desenvolvimento t√©cnico', isCorrect: true },
                    { text: 'Apenas t√©cnica sem criatividade', isCorrect: false },
                    { text: 'Somente teoria sem pr√°tica', isCorrect: false },
                    { text: 'Imita√ß√£o sem originalidade', isCorrect: false }
                ]
            },
            {
                id: `mock-q2-${grade}`,
                question_text: 'Como a cor influencia uma obra de arte?',
                options: [
                    { text: 'N√£o tem influ√™ncia alguma', isCorrect: false },
                    { text: 'Transmite emo√ß√µes e sensa√ß√µes', isCorrect: true },
                    { text: 'Serve apenas para decora√ß√£o', isCorrect: false },
                    { text: '√â sempre secund√°ria √† forma', isCorrect: false }
                ]
            },
            {
                id: `mock-q3-${grade}`,
                question_text: 'Qual a import√¢ncia do desenho na forma√ß√£o art√≠stica?',
                options: [
                    { text: '√â dispens√°vel na arte moderna', isCorrect: false },
                    { text: 'Desenvolve observa√ß√£o e coordena√ß√£o motora', isCorrect: true },
                    { text: 'S√≥ serve para copiar outros artistas', isCorrect: false },
                    { text: '√â √∫til apenas para arquitetura', isCorrect: false }
                ]
            }
        ]
    };
}

// ===================================================================================
// FUN√á√ïES DE SALVAMENTO DE RESULTADOS - CORRIGIDAS
// ===================================================================================

/**
 * Salva uma submiss√£o de prova completa com valida√ß√£o robusta.
 * @param {object} submissionData - Dados da submiss√£o.
 * @returns {Promise<object>} - Um objeto indicando o estado da opera√ß√£o.
 */
export async function saveSubmission(submissionData) {
    // CORRE√á√ÉO: Valida√ß√£o completa dos dados antes do salvamento
    const validationResult = validateSubmissionData(submissionData);
    if (!validationResult.isValid) {
        console.error('Dados de submiss√£o inv√°lidos:', validationResult.errors);
        return { success: false, synced: false, error: 'validation_failed', details: validationResult.errors };
    }

    if (!supabaseClient) {
        return saveSubmissionOffline(submissionData);
    }

    try {
        // CORRE√á√ÉO: Chama a fun√ß√£o RPC com dados validados
        const { error } = await supabaseClient.rpc('submit_assessment', {
            p_student_id: submissionData.studentId,
            p_assessment_id: submissionData.assessmentId,
            p_score: submissionData.score,
            p_total_questions: submissionData.totalQuestions,
            p_total_duration: submissionData.totalDuration,
            p_answers: submissionData.answerLog
        });

        if (error) {
            if (error.code === 'P0001') {
                return { success: false, synced: false, error: 'duplicate' };
            }
            throw error;
        }

        // CORRE√á√ÉO: Remove dados locais ap√≥s sucesso online
        removeFromPendingResults(submissionData);
        
        return { success: true, synced: true, error: null };

    } catch (error) {
        console.error("Falha na sincroniza√ß√£o:", error.message);
        return saveSubmissionOffline(submissionData);
    }
}

/**
 * NOVA FUN√á√ÉO: Valida√ß√£o robusta dos dados de submiss√£o
 */
function validateSubmissionData(data) {
    const errors = [];
    
    if (!data.studentId || typeof data.studentId !== 'string') {
        errors.push('studentId inv√°lido');
    }
    
    if (!data.assessmentId || typeof data.assessmentId !== 'string') {
        errors.push('assessmentId inv√°lido');
    }
    
    if (typeof data.score !== 'number' || data.score < 0) {
        errors.push('score inv√°lido');
    }
    
    if (typeof data.totalQuestions !== 'number' || data.totalQuestions <= 0) {
        errors.push('totalQuestions inv√°lido');
    }
    
    if (data.score > data.totalQuestions) {
        errors.push('score n√£o pode ser maior que totalQuestions');
    }
    
    if (typeof data.totalDuration !== 'number' || data.totalDuration < 0) {
        errors.push('totalDuration inv√°lido');
    }
    
    if (!Array.isArray(data.answerLog)) {
        errors.push('answerLog deve ser um array');
    }
    
    return {
        isValid: errors.length === 0,
        errors
    };
}

/**
 * NOVA FUN√á√ÉO: Salvamento offline melhorado
 */
function saveSubmissionOffline(submissionData) {
    try {
        const localResults = JSON.parse(localStorage.getItem('pending_results') || '[]');
        
        // CORRE√á√ÉO: Verifica duplicatas locais
        const isDuplicate = localResults.some(result => 
            result.studentId === submissionData.studentId && 
            result.assessmentId === submissionData.assessmentId
        );
        
        if (isDuplicate) {
            return { success: false, synced: false, error: 'duplicate_local' };
        }
        
        // Adiciona timestamp para controle
        const dataWithTimestamp = {
            ...submissionData,
            localTimestamp: Date.now()
        };
        
        localResults.push(dataWithTimestamp);
        localStorage.setItem('pending_results', JSON.stringify(localResults));
        
        return { success: true, synced: false, error: 'offline' };
        
    } catch (error) {
        console.error('Erro ao salvar offline:', error);
        return { success: false, synced: false, error: 'storage_failed' };
    }
}

/**
 * NOVA FUN√á√ÉO: Remove submiss√£o dos dados pendentes
 */
function removeFromPendingResults(submissionData) {
    try {
        const localResults = JSON.parse(localStorage.getItem('pending_results') || '[]');
        const filtered = localResults.filter(result => 
            !(result.studentId === submissionData.studentId && 
              result.assessmentId === submissionData.assessmentId)
        );
        localStorage.setItem('pending_results', JSON.stringify(filtered));
    } catch (error) {
        console.error('Erro ao limpar dados pendentes:', error);
    }
}

// ===================================================================================
// FUN√á√ïES PARA O PAINEL DO PROFESSOR - CORRIGIDAS
// ===================================================================================

/**
 * Busca todos os resultados com melhor tratamento de erros.
 * @returns {Promise<Array>} - Lista de todas as submiss√µes com detalhes.
 */
export async function getAllSubmissionsForDashboard() {
    if (!supabaseClient) {
        console.warn('Modo offline: retornando submiss√µes locais');
        return getLocalSubmissions();
    }
    
    try {
        const { data, error } = await supabaseClient
            .from('submissions')
            .select(`
                id,
                student_id,
                assessment_id,
                score,
                total_questions,
                total_duration_seconds,
                submitted_at,
                students (
                    id,
                    full_name
                ),
                assessments (
                    id,
                    title
                )
            `)
            .order('submitted_at', { ascending: false });

        if (error) throw error;
        
        // CORRE√á√ÉO: Filtra dados inv√°lidos
        const validSubmissions = (data || []).filter(submission => 
            submission.students && 
            submission.assessments && 
            submission.students.full_name &&
            submission.assessments.title
        );
        
        return validSubmissions;
        
    } catch (error) {
        console.error("Erro ao buscar submiss√µes:", error.message);
        return getLocalSubmissions();
    }
}

/**
 * NOVA FUN√á√ÉO: Busca submiss√µes locais para modo offline
 */
function getLocalSubmissions() {
    try {
        const localResults = JSON.parse(localStorage.getItem('pending_results') || '[]');
        
        return localResults.map((result, index) => ({
            id: `local-${index}`,
            student_id: result.studentId,
            assessment_id: result.assessmentId,
            score: result.score,
            total_questions: result.totalQuestions,
            total_duration_seconds: result.totalDuration,
            submitted_at: new Date(result.localTimestamp || Date.now()).toISOString(),
            students: {
                id: result.studentId,
                full_name: `Aluno Local ${index + 1}`
            },
            assessments: {
                id: result.assessmentId,
                title: 'Avalia√ß√£o Local'
            }
        }));
    } catch (error) {
        console.error('Erro ao carregar submiss√µes locais:', error);
        return [];
    }
}

/**
 * Busca os detalhes das respostas de uma submiss√£o espec√≠fica.
 * @param {string} submissionId - O ID da submiss√£o.
 * @returns {Promise<Array>} - Lista de respostas detalhadas.
 */
export async function getSubmissionAnswers(submissionId) {
    if (!supabaseClient || submissionId.startsWith('local-')) {
        console.warn('Modo offline ou submiss√£o local: retornando respostas mock');
        return createMockAnswers(submissionId);
    }
    
    try {
        const { data, error } = await supabaseClient
            .from('submission_answers')
            .select(`
                id,
                question_id,
                is_correct,
                duration_seconds,
                questions (
                    question_text
                )
            `)
            .eq('submission_id', submissionId);
            
        if (error) throw error;
        
        return data || [];
        
    } catch (error) {
        console.error("Erro ao buscar respostas da submiss√£o:", error.message);
        return createMockAnswers(submissionId);
    }
}

/**
 * NOVA FUN√á√ÉO: Cria respostas mock para submiss√µes locais
 */
function createMockAnswers(submissionId) {
    return [
        {
            id: `mock-answer-1-${submissionId}`,
            question_id: 'mock-question-1',
            is_correct: true,
            duration_seconds: 30,
            questions: {
                question_text: 'Quest√£o exemplo 1'
            }
        },
        {
            id: `mock-answer-2-${submissionId}`,
            question_id: 'mock-question-2',
            is_correct: false,
            duration_seconds: 45,
            questions: {
                question_text: 'Quest√£o exemplo 2'
            }
        }
    ];
}

// ===================================================================================
// NOVAS FUN√á√ïES: UTILIT√ÅRIOS E SINCRONIZA√á√ÉO
// ===================================================================================

/**
 * NOVA FUN√á√ÉO: Sincroniza todos os dados pendentes
 */
export async function syncPendingSubmissions() {
    if (!supabaseClient) {
        return { success: false, error: 'offline_mode' };
    }
    
    try {
        const localResults = JSON.parse(localStorage.getItem('pending_results') || '[]');
        
        if (localResults.length === 0) {
            return { success: true, synced: 0, errors: [] };
        }
        
        let syncedCount = 0;
        const errors = [];
        
        for (const result of localResults) {
            try {
                const syncResult = await saveSubmission(result);
                if (syncResult.success && syncResult.synced) {
                    syncedCount++;
                }
            } catch (error) {
                errors.push({
                    studentId: result.studentId,
                    error: error.message
                });
            }
        }
        
        return {
            success: true,
            synced: syncedCount,
            total: localResults.length,
            errors
        };
        
    } catch (error) {
        console.error('Erro na sincroniza√ß√£o:', error);
        return { success: false, error: error.message };
    }
}

/**
 * NOVA FUN√á√ÉO: Limpa dados locais antigos
 */
export function cleanOldLocalData(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 dias
    try {
        const localResults = JSON.parse(localStorage.getItem('pending_results') || '[]');
        const now = Date.now();
        
        const filtered = localResults.filter(result => {
            const age = now - (result.localTimestamp || 0);
            return age < maxAge;
        });
        
        localStorage.setItem('pending_results', JSON.stringify(filtered));
        
        return {
            removed: localResults.length - filtered.length,
            remaining: filtered.length
        };
        
    } catch (error) {
        console.error('Erro ao limpar dados antigos:', error);
        return { removed: 0, remaining: 0 };
    }
}